const alt = event.altKey; //Key you hold down to pull up dialog for setting dimensions based on number of grid squares
const shift = event.shiftKey; //Key you hold do to cycle through guesses at scene dimensions
const ctrl = event.ctrlKey; //Key you hold to override multiple online users warning

let maxImage = 16384; //Usually set to 16384, 8192, or 4096 to match WebGL limits
let maxDepth = 256; //Maximum grid size you want
let minDepth = 50; //Minimum grid size you want
let maxAttempts = 9; //Reduce this number to increase performance; increase this number if you're sure there is a match that the algorithim just isn't finding yet

const fixPadding = true; //Should padding be adjusted
let newPadding = 0.05; //Preferred amount of padding
const defaultPadding = 0.25; //Usually 0.25; macro will not fix padding if scene's existing padding is not default

const warnMessage = `No common factors were found with the given parameters. Scene was left unchanged.`;
const infoMessage = `Scene grid size, width, and height already seem to be correct. Scene was left unchanged.`;

//Don't edit below this line unless you know what you're doing

const scene = game.canvas.scene;
const flags = scene.flags;

if (scene.background.src) {

    if (game.users.filter(u => u.active).length > 1 && !ctrl) {
        ui.notifications.warn(`Multiple users are online right now. Hold appropriate key and try again if you're sure you want to adjust the scene's dimensions.`);
    } else {

        if (!fixPadding || scene.padding !== defaultPadding) {
            newPadding = scene.padding;
        }

        let v = 0;
        if (flags.world && flags.world.lastCheck && shift) {
            v = Math.floor(flags.world.lastCheck + 1);
        } else if (shift) {
            v = 1;
        }
        const img = new Image();
        let factorsW = new Array();
        let factorsS = new Array();

        maxImage = Math.round(maxImage);
        if (minDepth < 50) {
            minDepth = 50;
        } else {
            minDepth = Math.round(minDepth);
        }
        if (maxDepth > maxImage) {
            maxDepth = maxImage;
        } else {
            maxDepth = Math.round(maxDepth);
        }
        if (maxAttempts < 1) {
            maxAttempts = 1;
        } else {
            maxAttempts = Math.round(maxAttempts);
        }

        img.onload = async function() {

            if (alt) {

                let widthDefault = Math.floor(scene.width / minDepth);
                if (flags.world && flags.world.widthSquares) {
                    widthDefault = flags.world.widthSquares;
                }
                let heightDefault = "";
                if (flags.world && flags.world.heightSquares) {
                    heightDefault = flags.world.heightSquares;
                }
                let maxDefault = maxImage;
                if (flags.world && flags.world.maxDimension) {
                    maxDefault = flags.world.maxDimension;
                }

                let d = new Dialog({
                    title: "Set Scene Dimensions by Squares",
                    content: `<label for="width" style="display: inline-block; width: 43%; margin: 4px 1%; font-weight: bold">Num. of Width Squares:</label><input type="number" id="width" name="width" style="display: inline-block; width: 53%; margin: 4px 1%;" value="${widthDefault}"><label for="height" style="display: inline-block; width: 43%; margin: 4px 1%; font-weight: bold">Num. of Height Squares:</label><input type="number" id="height" name="height" style="display: inline-block; width: 53%; margin: 4px 1%;" value="${heightDefault}"><label for="max" style="display: inline-block; width: 43%; margin: 4px 1%; font-weight: bold">Max. Dimension Length:</label><input type="number" id="max" name="max" style="display: inline-block; width: 53%; margin: 4px 1%;" value="${maxDefault}">`,
                    buttons: {
                        one: {
                            icon: '<i class="fas fa-check"></i>',
                            label: "Resize Scene",
                            callback: async (html) => {
                                let widthSq = Math.floor(scene.width / scene.grid.size);
                                if (html[0].querySelector('#width').value > 0) {
                                    widthSq = html[0].querySelector('#width').value;
                                }
                                let heightSq = Math.floor(scene.height / (scene.width / widthSq));
                                if (html[0].querySelector('#height').value > 0) {
                                    heightSq = html[0].querySelector('#height').value;
                                }
                                let newMax = maxImage;
                                if (html[0].querySelector('#max').value > 0) {
                                    newMax = html[0].querySelector('#max').value;
                                }
                                let newGrid = Math.floor(newMax / heightSq);
                                if (widthSq > heightSq) {
                                    newGrid = Math.floor(newMax / widthSq);
                                }
                                const newWidth = newGrid * widthSq;
                                const newHeight = newGrid * heightSq;
                                await scene.update({
                                    'grid.size': parseInt(newGrid),
                                    'width': parseInt(newWidth),
                                    'height': parseInt(newHeight),
                                    'flags.world.widthSquares': parseInt(widthSq),
                                    'flags.world.heightSquares': parseInt(heightSq),
                                    'flags.world.maxDimension': parseInt(newMax),
                                    'padding': newPadding
                                });

                            }
                        }
                    },
                    default: "one"
                });
                d.render(true);

            } else {
                const width = this.width;
                const height = this.height;
                let newWidth = width;
                let newHeight = height;
                let newDepth = maxDepth;
                for (let i = 1; i <= maxAttempts; i++) {
                    factorsW = new Array();
                    factorsS = new Array();
                    newWidth = width * i;
                    newHeight = height * i;
                    newDepth = maxDepth * i;
                    if (newWidth <= maxImage && newHeight <= maxImage) {

                        for (let i = minDepth; i <= newDepth; i++) {
                            if ((newWidth / i) === Math.floor(newWidth / i)) {
                                factorsW.push(i);
                            }
                        }
                        for (let i = 0; i < factorsW.length; i++) {
                            if ((newHeight / factorsW[i]) === Math.floor(newHeight / factorsW[i])) {
                                factorsS.push(factorsW[i]);
                            }
                        }
                        if (factorsS.length > 0) {
                            break;
                        }

                    }
                }
                if (factorsS[v] && factorsS[v] >= minDepth) {

                    if (factorsS[v] !== scene.grid.size || scene.width !== newWidth || scene.height !== newHeight) {
                        ui.notifications.info(`Grid size was set to ` + factorsS[v] + ` (option ` + (v + 1) + ` out of ` + factorsS.length + ` options; scene dimensions are ` + newWidth + ` by ` + newHeight + `).`);
                        await scene.update({
                            'grid.size': parseInt(factorsS[v]),
                            'width': parseInt(newWidth),
                            'height': parseInt(newHeight),
                            'flags.world.lastCheck': parseInt(v),
                            'padding': newPadding
                        });
                    } else {
                        ui.notifications.info(infoMessage);
                    }

                } else if (factorsS.length > 0 && factorsS.slice(-1)[0] >= minDepth) {

                    if (factorsS.slice(-1)[0] !== scene.grid.size || scene.width !== newWidth || scene.height !== newHeight) {
                        ui.notifications.info(`Grid size was set to ` + factorsS.slice(-1)[0] + ` (option ` + factorS.length + ` out of ` + factorsS.length + ` options; scene dimensions are ` + newWidth + ` by ` + newHeight + `).`);
                        await scene.update({
                            'grid.size': parseInt(factorsS.slice(-1)[0]),
                            'width': newWidth,
                            'height': newHeight,
                            'flags.world.lastCheck': parseInt(0),
                            'padding': newPadding
                        });
                    } else {
                        ui.notifications.info(infoMessage);
                    }

                } else {

                    ui.notifications.warn(warnMessage);

                }
            }
        }
        img.src = scene.background.src;

    }
} else {
    ui.notifications.warn(`This scene has no background image set. Please set one and try again.`);
}
